// MongoDB Playground
// To disable this template go to Settings | MongoDB | Use Default Template For Playground.
// Make sure you are connected to enable completions and to be able to run a playground.
// Use Ctrl+Space inside a snippet or a string literal to trigger completions.

// Select the database to use.
use('mongodbVSCodePlaygroundDB');

// The drop() command destroys all data from a collection.
// Make sure you run it against the correct database and collection.
db.bookings.drop();

// Insert a few documents into the bookings collection.
db.bookings.insertMany([
    {   
        '_id': 1,
        'HT': 90,
        'TVA':1.2,
        'services': {
            'HT': 32,
            'TVA': 2.3,
            'Quantity': 3
        }
    },
    {
        '_id': 2,
		'HT': 36,
        'TVA':9,
        'services': {
            'HT': 8,
            'TVA': 1.2,
            'Quantity': 1
        }
    },
    {
        '_id': 3,
        'HT': 14,
        'TVA': 2.1,
        'services': {
            'HT': 67,
            'TVA': 10.05,
            'Quantity':8
        }
    },
	{
        '_id': 4,
        'HT': 14,
        'TVA': 2.1,
    }  ,

]);

// Run a find command to view items sold on April 4th, 2014.
// db.bookings.find({ date: { $gte: new Date('2014-04-04'), $lt: new Date('2014-04-05') } });

// Build an aggregation to view total bookings for each product in 2014.
// const aggregation = [
//   { $match: { date: { $gte: new Date('2014-01-01'), $lt: new Date('2015-01-01') } } },
//   { $group: { _id: '$item', totalSaleAmount: { $sum: { $multiply: [ '$price', '$quantity' ] } } } }
// ];

const aggregation = [
	{$addFields:{ TTC:{"$add":["$HT", "$TVA"]}}},
    {$sort: {TTC: 1}},
    { $group: {
        _id: null,
        //Le nombre total de bookings présents en base
        BookingsCount: { $sum: 1, },
        //Le chiffre d’affaire HT
        HTprofit: { $sum: '$HT', },
        //Le panier moyen HT
        HTAverage: { $avg: '$HT' },
		//Le nombre total de services complémentaires commandés, tout booking confondu
		TotalServicesOrdered: { $sum: '$services.Quantity' },
		//Le nombre moyen de services complémentaires commandés par booking
		AverageServicesOrdered: { $avg: { $cond: ['$services.Quantity', "$services.Quantity", 0]} },
		
		BookingsWithServices: { $sum: { $cond: ['$services.Quantity', 1, 0]} },
		BookingsWithoutServices: { $sum: { $cond: ['$services.Quantity', 0, 1]} },
		TTCs: {$push: "$TTC"}
	}},
	{$project: {
		BookingsCount: 1,
		HTprofit: 1,
		HTAverage:1,
		TotalServicesOrdered:1, 
		AverageServicesOrdered: 1,
		//Le ratio de booking sans et avec services complémentaires
		ServicesRatio: { $divide: [ "$BookingsWithoutServices", "$BookingsWithServices" ]},
		//Le prix TTC médian des bookings
		TTCMedian: {
			$cond: [{$eq: [{$mod: ["$BookingsCount", 2]}, 0]},
			{$divide: [
				{$add: [
					{"$arrayElemAt": ["$TTCs", {$divide: ["$BookingsCount", 2]}]},
					{"$arrayElemAt": ["$TTCs", {$subtract: [{$divide: ["$BookingsCount", 2]}, 1]}]}
				]}
			, 2]},
			{"$arrayElemAt": ["$TTCs", {$trunc: {$divide: ["$BookingsCount", 2]}}]}
		]},
	}},
	
]

// Run the aggregation and open a cursor to the results.
// Use toArray() to exhaust the cursor to return the whole result set.
// You can use hasNext()/next() to iterate through the cursor page by page.
db.bookings.aggregate(aggregation);
